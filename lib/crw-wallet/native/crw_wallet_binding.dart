// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings for crw-wallet
class WalletBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WalletBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WalletBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief Creates a random 24 words mnemonic.
  /// @return Returns the generated mnemonic or NULL in case of error.
  /// The caller must take care of releasing the returned mnemonic with the
  /// cstring_free function.
  /// In case of error the error cause can be obtained using the error_message_utf8
  /// function.
  ffi.Pointer<ffi.Int8> wallet_random_mnemonic() {
    return _wallet_random_mnemonic();
  }

  late final _wallet_random_mnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_wallet_random_mnemonic>>(
          'wallet_random_mnemonic');
  late final _dart_wallet_random_mnemonic _wallet_random_mnemonic =
      _wallet_random_mnemonic_ptr.asFunction<_dart_wallet_random_mnemonic>();

  /// @brief Free a string.
  /// @param str: Pointer to the string to free.
  void cstring_free(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _cstring_free(
      str,
    );
  }

  late final _cstring_free_ptr =
      _lookup<ffi.NativeFunction<_c_cstring_free>>('cstring_free');
  late final _dart_cstring_free _cstring_free =
      _cstring_free_ptr.asFunction<_dart_cstring_free>();

  /// @brief Derive a Secp256k1 key pair from the given mnemonic and derivation_path.
  /// @param mnemonic: The wallet mnemonic.
  /// @param derivation_path: The derivation path used to derive the keys from the mnemonic.
  /// @return Returns a pointer to a valid wallet or NULL on error.
  /// The caller must take care of freeing the returned wallet instance with
  /// the wallet_free function.
  /// In case of error the error cause can be obtained using the error_message_utf8
  /// function.
  ffi.Pointer<wallet> wallet_from_mnemonic(
    ffi.Pointer<ffi.Int8> mnemonic,
    ffi.Pointer<ffi.Int8> derivation_path,
  ) {
    return _wallet_from_mnemonic(
      mnemonic,
      derivation_path,
    );
  }

  late final _wallet_from_mnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_wallet_from_mnemonic>>(
          'wallet_from_mnemonic');
  late final _dart_wallet_from_mnemonic _wallet_from_mnemonic =
      _wallet_from_mnemonic_ptr.asFunction<_dart_wallet_from_mnemonic>();

  /// @brief Free a wallet instance.
  /// @param wallet: The wallet to free.
  void wallet_free(
    ffi.Pointer<wallet> wallet,
  ) {
    return _wallet_free(
      wallet,
    );
  }

  late final _wallet_free_ptr =
      _lookup<ffi.NativeFunction<_c_wallet_free>>('wallet_free');
  late final _dart_wallet_free _wallet_free =
      _wallet_free_ptr.asFunction<_dart_wallet_free>();

  /// @brief Gets the bec32 address associated to the wallet.
  /// @param wallet: Pointer to the wallet instance.
  /// @param hrp: The address human readable part.
  /// @return Returns the bech32 address associated to the wallet on success or
  /// NULL on error.
  /// The caller must take care of freeing the returned address with the
  /// cstring_free function.
  /// In case of error the error cause can be obtained using the error_message_utf8
  /// function.
  ffi.Pointer<ffi.Int8> wallet_get_bech32_address(
    ffi.Pointer<wallet> wallet,
    ffi.Pointer<ffi.Int8> hrp,
  ) {
    return _wallet_get_bech32_address(
      wallet,
      hrp,
    );
  }

  late final _wallet_get_bech32_address_ptr =
      _lookup<ffi.NativeFunction<_c_wallet_get_bech32_address>>(
          'wallet_get_bech32_address');
  late final _dart_wallet_get_bech32_address _wallet_get_bech32_address =
      _wallet_get_bech32_address_ptr
          .asFunction<_dart_wallet_get_bech32_address>();

  /// @brief Gets secp256 public key from the wallet.
  /// @param wallet: Pointer to the wallet instance.
  /// @param compressed: True to get the public key in a compressed format, false otherwise.
  /// @param out_buffer: Pointer where will be stored the public key
  /// @param size: Size of out_buffer.
  /// @return Returns the number of bytes wrote inside out_buffer on success,
  /// -1 if the provided arguments are invalid or -2 if the public key don't fit
  /// into out_buffer.
  int wallet_get_public_key(
    ffi.Pointer<wallet> wallet,
    int compressed,
    ffi.Pointer<ffi.Uint8> out_buffer,
    int size,
  ) {
    return _wallet_get_public_key(
      wallet,
      compressed,
      out_buffer,
      size,
    );
  }

  late final _wallet_get_public_key_ptr =
      _lookup<ffi.NativeFunction<_c_wallet_get_public_key>>(
          'wallet_get_public_key');
  late final _dart_wallet_get_public_key _wallet_get_public_key =
      _wallet_get_public_key_ptr.asFunction<_dart_wallet_get_public_key>();

  /// @brief Performs the signature of the provided data.
  /// @param wallet: Pointer to the wallet instance.
  /// @param data: The data to sign.
  /// @param len: The length of the data to sign.
  /// @return Returns a pointer to a signature_t instance on success, NULL on error.
  /// The caller must take care of freeing the returned signature with the
  /// wallet_sign_free function.
  /// In case of error the error cause can be obtained using the error_message_utf8
  /// function.
  ffi.Pointer<signature_t> wallet_sign(
    ffi.Pointer<wallet> wallet,
    ffi.Pointer<ffi.Uint8> data,
    int len,
  ) {
    return _wallet_sign(
      wallet,
      data,
      len,
    );
  }

  late final _wallet_sign_ptr =
      _lookup<ffi.NativeFunction<_c_wallet_sign>>('wallet_sign');
  late final _dart_wallet_sign _wallet_sign =
      _wallet_sign_ptr.asFunction<_dart_wallet_sign>();

  /// @brief Free a signature instance.
  /// @param signature: Pointer to the signature to free.
  void wallet_sign_free(
    ffi.Pointer<signature_t> signature,
  ) {
    return _wallet_sign_free(
      signature,
    );
  }

  late final _wallet_sign_free_ptr =
      _lookup<ffi.NativeFunction<_c_wallet_sign_free>>('wallet_sign_free');
  late final _dart_wallet_sign_free _wallet_sign_free =
      _wallet_sign_free_ptr.asFunction<_dart_wallet_sign_free>();

  /// @brief Clears the last error.
  void clear_last_error() {
    return _clear_last_error();
  }

  late final _clear_last_error_ptr =
      _lookup<ffi.NativeFunction<_c_clear_last_error>>('clear_last_error');
  late final _dart_clear_last_error _clear_last_error =
      _clear_last_error_ptr.asFunction<_dart_clear_last_error>();

  /// @brief Gets the last error message length.
  int last_error_length() {
    return _last_error_length();
  }

  late final _last_error_length_ptr =
      _lookup<ffi.NativeFunction<_c_last_error_length>>('last_error_length');
  late final _dart_last_error_length _last_error_length =
      _last_error_length_ptr.asFunction<_dart_last_error_length>();

  /// @brief Gets the last error message as UTF-8 encoded string.
  /// @param out_buf: Pointer where will be stored the error message.
  /// @param buf_size: Size of out_buf.
  /// @return Returns the number of bytes wrote into out_buf or -1 on error.
  int error_message_utf8(
    ffi.Pointer<ffi.Int8> out_buf,
    int buf_size,
  ) {
    return _error_message_utf8(
      out_buf,
      buf_size,
    );
  }

  late final _error_message_utf8_ptr =
      _lookup<ffi.NativeFunction<_c_error_message_utf8>>('error_message_utf8');
  late final _dart_error_message_utf8 _error_message_utf8 =
      _error_message_utf8_ptr.asFunction<_dart_error_message_utf8>();
}

class __fsid_t extends ffi.Opaque {}

class wallet extends ffi.Opaque {}

/// @brief Struct that represents a signature.
class signature_t extends ffi.Struct {
  /// @brief The length of the signature.
  @ffi.Uint32()
  external int len;

  /// @brief The data signature.
  external ffi.Pointer<ffi.Uint8> data;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 33;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

typedef _c_wallet_random_mnemonic = ffi.Pointer<ffi.Int8> Function();

typedef _dart_wallet_random_mnemonic = ffi.Pointer<ffi.Int8> Function();

typedef _c_cstring_free = ffi.Void Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_cstring_free = void Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_wallet_from_mnemonic = ffi.Pointer<wallet> Function(
  ffi.Pointer<ffi.Int8> mnemonic,
  ffi.Pointer<ffi.Int8> derivation_path,
);

typedef _dart_wallet_from_mnemonic = ffi.Pointer<wallet> Function(
  ffi.Pointer<ffi.Int8> mnemonic,
  ffi.Pointer<ffi.Int8> derivation_path,
);

typedef _c_wallet_free = ffi.Void Function(
  ffi.Pointer<wallet> wallet,
);

typedef _dart_wallet_free = void Function(
  ffi.Pointer<wallet> wallet,
);

typedef _c_wallet_get_bech32_address = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<wallet> wallet,
  ffi.Pointer<ffi.Int8> hrp,
);

typedef _dart_wallet_get_bech32_address = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<wallet> wallet,
  ffi.Pointer<ffi.Int8> hrp,
);

typedef _c_wallet_get_public_key = ffi.Int32 Function(
  ffi.Pointer<wallet> wallet,
  ffi.Uint32 compressed,
  ffi.Pointer<ffi.Uint8> out_buffer,
  ffi.Int32 size,
);

typedef _dart_wallet_get_public_key = int Function(
  ffi.Pointer<wallet> wallet,
  int compressed,
  ffi.Pointer<ffi.Uint8> out_buffer,
  int size,
);

typedef _c_wallet_sign = ffi.Pointer<signature_t> Function(
  ffi.Pointer<wallet> wallet,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint32 len,
);

typedef _dart_wallet_sign = ffi.Pointer<signature_t> Function(
  ffi.Pointer<wallet> wallet,
  ffi.Pointer<ffi.Uint8> data,
  int len,
);

typedef _c_wallet_sign_free = ffi.Void Function(
  ffi.Pointer<signature_t> signature,
);

typedef _dart_wallet_sign_free = void Function(
  ffi.Pointer<signature_t> signature,
);

typedef _c_clear_last_error = ffi.Void Function();

typedef _dart_clear_last_error = void Function();

typedef _c_last_error_length = ffi.Int32 Function();

typedef _dart_last_error_length = int Function();

typedef _c_error_message_utf8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> out_buf,
  ffi.Int32 buf_size,
);

typedef _dart_error_message_utf8 = int Function(
  ffi.Pointer<ffi.Int8> out_buf,
  int buf_size,
);
